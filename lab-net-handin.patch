commit 1b7b47c31c538b19b8f009436a128dd93534e1fa
Author: h811044 <142477229+h811044@users.noreply.github.com>
Date:   Fri Oct 20 08:20:29 2023 +0800

    Lab: networking

diff --git a/kernel/e1000.c b/kernel/e1000.c
index 70a2adf..9d7b217 100644
--- a/kernel/e1000.c
+++ b/kernel/e1000.c
@@ -103,6 +103,42 @@ e1000_transmit(struct mbuf *m)
   // a pointer so that it can be freed after sending.
   //
   
+  int i;
+
+  acquire(&e1000_lock);
+
+  // First ask the E1000 for the TX ring index at which it's expecting the next packet,
+  // by reading the E1000_TDT control register.
+  i = regs[E1000_TDT];
+
+  // Then check if the the ring is overflowing.
+  // If E1000_TXD_STAT_DD is not set in the descriptor indexed by E1000_TDT,
+  // the E1000 hasn't finished the corresponding previous transmission request, so return an error.
+  if ((tx_ring[i].status & E1000_TXD_STAT_DD) == 0) {
+    release(&e1000_lock);
+    return -1;
+  }
+
+  // Otherwise, use mbuffree() to free the last mbuf that was transmitted from that descriptor (if there was one).
+  if (tx_mbufs[i]) {
+    mbuffree(tx_mbufs[i]);
+  }
+
+  // Then fill in the descriptor.
+  // m->head points to the packet's content in memory, and m->len is the packet length.
+  // Set the necessary cmd flags (look at Section 3.3 in the E1000 manual) and stash away a pointer to the mbuf for later freeing.
+  tx_ring[i].addr = (uint64)m->head;
+  tx_ring[i].length =  m->len;
+  tx_ring[i].cmd = E1000_TXD_CMD_RS | E1000_TXD_CMD_EOP;
+  tx_ring[i].status = 0;
+  tx_mbufs[i] = m;
+
+  // Finally, update the ring position by adding one to E1000_TDT modulo TX_RING_SIZE.
+  regs[E1000_TDT] = (i + 1) % TX_RING_SIZE;
+
+  // If e1000_transmit() added the mbuf successfully to the ring, return 0.
+  // On failure (e.g., there is no descriptor available to transmit the mbuf), return -1 so that the caller knows to free the mbuf.
+  release(&e1000_lock);
   return 0;
 }
 
@@ -115,6 +151,36 @@ e1000_recv(void)
   // Check for packets that have arrived from the e1000
   // Create and deliver an mbuf for each packet (using net_rx()).
   //
+
+  int i;
+
+  while (1) {
+    // First ask the E1000 for the ring index at which the next waiting received packet (if any) is located,
+    // by fetching the E1000_RDT control register and adding one modulo RX_RING_SIZE.
+    i = (regs[E1000_RDT] + 1) % RX_RING_SIZE;
+
+    // Then check if a new packet is available by checking for the E1000_RXD_STAT_DD bit in the status portion of the descriptor.
+    // If not, stop.
+    if ((rx_ring[i].status & E1000_RXD_STAT_DD) == 0) {
+      break;
+    }
+
+    // Otherwise, update the mbuf's m->len to the length reported in the descriptor.
+    // Deliver the mbuf to the network stack using net_rx().
+    rx_mbufs[i]->len = rx_ring[i].length;
+    net_rx(rx_mbufs[i]);
+
+    // Then allocate a new mbuf using mbufalloc() to replace the one just given to net_rx().
+    // Program its data pointer (m->head) into the descriptor. Clear the descriptor's status bits to zero.
+    rx_mbufs[i] = mbufalloc(0);
+    if (!rx_mbufs[i])
+      panic("e1000_recv");
+    rx_ring[i].addr = (uint64) rx_mbufs[i]->head;
+    rx_ring[i].status = 0;
+
+    // Finally, update the E1000_RDT register to be the index of the last ring descriptor processed.
+    regs[E1000_RDT] = (regs[E1000_RDT] + 1) % RX_RING_SIZE;
+  }
 }
 
 void
