commit ce075e0510d78f331054d83c7358d2fae18a0d09
Author: h811044 <142477229+h811044@users.noreply.github.com>
Date:   Wed Oct 4 06:17:09 2023 +0800

    Lab: Copy-on-Write Fork for xv6

diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..1714545 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             kref(void *, int);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -170,6 +171,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+uint64          cow(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..069a1d3 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -21,6 +21,7 @@ struct run {
 struct {
   struct spinlock lock;
   struct run *freelist;
+  int refcount[(PHYSTOP - KERNBASE) / PGSIZE];
 } kmem;
 
 void
@@ -51,6 +52,12 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  acquire(&kmem.lock);
+  int refc = --kmem.refcount[((uint64)pa - KERNBASE) / PGSIZE];
+  release(&kmem.lock);
+  if(refc > 0)
+    return;
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -72,11 +79,31 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r){
     kmem.freelist = r->next;
+    kmem.refcount[((uint64)r - KERNBASE) / PGSIZE] = 1;
+  }
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int
+kref(void *pa, int inc)
+{
+  int refc;
+
+  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+    panic("kref");
+
+  acquire(&kmem.lock);
+  if(inc){
+    refc = ++kmem.refcount[((uint64)pa - KERNBASE) / PGSIZE];
+  } else {
+    refc = kmem.refcount[((uint64)pa - KERNBASE) / PGSIZE];
+  }
+  release(&kmem.lock);
+  return refc;
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..64d67f3 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_C (1L << 8) // whether it is a COW mapping
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..bb07da2 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,6 +65,15 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if(r_scause() == 15){
+    // Store/AMO page fault
+
+    if(cow(p->pagetable, r_stval()) == 0){
+      // If a COW page fault occurs and there's no free memory, the process should be killed.
+      printf("usertrap(): COW scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      p->killed = 1;
+    }
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..4d53f11 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -148,7 +148,7 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
   for(;;){
     if((pte = walk(pagetable, a, 1)) == 0)
       return -1;
-    if(*pte & PTE_V)
+    if((*pte & PTE_V) && !(*pte & PTE_C))
       panic("mappages: remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
     if(a == last)
@@ -303,7 +303,6 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -312,12 +311,17 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    int w = flags & PTE_W;
+    if(w){
+      flags &= ~PTE_W;
+      flags |= PTE_C;
+    }
+    if(mappages(new, i, PGSIZE, pa, flags) != 0)
       goto err;
+    kref((void*)pa, 1);
+    if(w){
+      *pte &= ~PTE_W;
+      *pte |= PTE_C;
     }
   }
   return 0;
@@ -350,7 +354,7 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
-    pa0 = walkaddr(pagetable, va0);
+    pa0 = cow(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
@@ -432,3 +436,45 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+uint64
+cow(pagetable_t pagetable, uint64 va)
+{
+  pte_t *pte;
+  uint64 pa;
+  char *mem;
+  uint flags;
+
+  if(va >= MAXVA)
+    return 0;
+
+  pte = walk(pagetable, va, 0);
+  if(pte == 0)
+    return 0;
+  if((*pte & PTE_V) == 0)
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  pa = PTE2PA(*pte);
+  if(*pte & PTE_C){
+    if(kref((char *)pa, 0) == 1){
+      *pte |= PTE_W;
+      *pte &= ~PTE_C;
+    } else {
+      if((mem = kalloc()) == 0)
+        return 0;
+      memmove(mem, (char *)pa, PGSIZE);
+      kfree((char *)pa);
+      pa = (uint64)mem;
+      flags = PTE_FLAGS(*pte);
+      flags |= PTE_W;
+      flags &= ~PTE_C;
+      va = PGROUNDDOWN(va);
+      if(mappages(pagetable, va, PGSIZE, (uint64)mem, flags) != 0){
+        kfree(mem);
+        return 0;
+      }
+    }
+  }
+  return pa;
+}
